{"version":3,"sources":["yamlWorker.ts"],"names":[],"mappings":"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","file":"yamlWorker.js","sourceRoot":"..\\src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Red Hat, Inc. All rights reserved.\n *  Copyright (c) Adam Voss. All rights reserved.\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n'use strict';\n\nimport Thenable = monaco.Thenable;\nimport IWorkerContext = monaco.worker.IWorkerContext;\n\nimport * as ls from 'vscode-languageserver-types';\nimport * as yamlParser from './languageservice/parser/yamlParser04';\nimport * as yamlParser2 from './languageservice/parser/yamlParser07';\nimport * as yamlService from './languageservice/yamlLanguageService';\nimport * as jsonService from 'vscode-json-languageservice';\n\nlet defaultSchemaRequestService;\nif (typeof fetch !== 'undefined') {\n  defaultSchemaRequestService = function(url) {\n    return fetch(url).then(response => response.text());\n  };\n}\n\nexport class YAMLWorker {\n  private _ctx: IWorkerContext;\n  private _languageService: yamlService.LanguageService;\n  private _languageSettings: yamlService.LanguageSettings;\n  private _jsonlanguageService: jsonService.LanguageService;\n  private _languageId: string;\n\n  constructor(ctx: IWorkerContext, createData: ICreateData) {\n    this._ctx = ctx;\n    this._languageSettings = createData.languageSettings;\n    this._languageId = createData.languageId;\n    this._languageService = yamlService.getLanguageService(\n      createData.enableSchemaRequest && defaultSchemaRequestService,\n      null,\n      []\n    );\n    this._jsonlanguageService = jsonService.getLanguageService({\n      schemaRequestService:\n        createData.enableSchemaRequest && defaultSchemaRequestService,\n    });\n    this._languageService.configure({\n      ...this._languageSettings,\n      hover: true,\n      isKubernetes: true,\n    });\n  }\n\n  public doValidation(uri: string): Thenable<ls.Diagnostic[]> {\n    const document = this._getTextDocument(uri);\n    if (document) {\n      const yamlDocument = yamlParser2.parse(document.getText());\n      return this._languageService.doValidation(\n        this._jsonlanguageService,\n        document,\n        yamlDocument,\n        false\n      );\n    }\n    return Promise.resolve([]);\n  }\n\n  public doComplete(\n    uri: string,\n    position: ls.Position\n  ): Thenable<ls.CompletionList> {\n    const document = this._getTextDocument(uri);\n    const yamlDocument = yamlParser.parse(document.getText());\n    return this._languageService.doComplete(document, position, yamlDocument);\n  }\n\n  public doResolve(item: ls.CompletionItem): Thenable<ls.CompletionItem> {\n    return this._languageService.doResolve(item);\n  }\n\n  public doHover(uri: string, position: ls.Position): Thenable<ls.Hover> {\n    const document = this._getTextDocument(uri);\n    const yamlDocument = yamlParser2.parse(document.getText());\n    return this._languageService.doHover(\n      this._jsonlanguageService,\n      document,\n      position,\n      yamlDocument\n    );\n  }\n\n  public format(\n    uri: string,\n    range: ls.Range,\n    options: ls.FormattingOptions\n  ): Thenable<ls.TextEdit[]> {\n    const document = this._getTextDocument(uri);\n    const textEdits = this._languageService.doFormat(document, {\n      enable: true,\n    });\n    return Promise.resolve(textEdits);\n  }\n\n  public resetSchema(uri: string): Thenable<boolean> {\n    return Promise.resolve(this._languageService.resetSchema(uri));\n  }\n\n  public findDocumentSymbols(uri: string): Thenable<ls.SymbolInformation[]> {\n    const document = this._getTextDocument(uri);\n    const yamlDocument = yamlParser2.parse(document.getText());\n    const symbols = this._languageService.findDocumentSymbols2(\n      this._jsonlanguageService,\n      document,\n      yamlDocument\n    );\n    return Promise.resolve(symbols);\n  }\n\n  public findDocumentColors(uri: string): Thenable<ls.ColorInformation[]> {\n    const document = this._getTextDocument(uri);\n    const stylesheet = yamlParser2.parse(document.getText());\n    const colorSymbols = this._languageService.findDocumentColors(\n      this._jsonlanguageService,\n      document,\n      stylesheet\n    );\n    return Promise.resolve(colorSymbols);\n  }\n\n  public getColorPresentations(\n    uri: string,\n    color: ls.Color,\n    range: ls.Range\n  ): Thenable<ls.ColorPresentation[]> {\n    const document = this._getTextDocument(uri);\n    const stylesheet = yamlParser2.parse(document.getText());\n    const colorPresentations = this._languageService.getColorPresentations(\n      this._jsonlanguageService,\n      document,\n      stylesheet,\n      color,\n      range\n    );\n    return Promise.resolve(colorPresentations);\n  }\n\n  private _getTextDocument(uri: string): ls.TextDocument {\n    const models = this._ctx.getMirrorModels();\n    for (const model of models) {\n      if (model.uri.toString() === uri) {\n        return ls.TextDocument.create(\n          uri,\n          this._languageId,\n          model.version,\n          model.getValue()\n        );\n      }\n    }\n    return null;\n  }\n}\n\nexport interface ICreateData {\n  languageId: string;\n  languageSettings: yamlService.LanguageSettings;\n  enableSchemaRequest: boolean;\n}\n\nexport function create(\n  ctx: IWorkerContext,\n  createData: ICreateData\n): YAMLWorker {\n  return new YAMLWorker(ctx, createData);\n}\n"]}