{"version":3,"sources":["workerManager.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;;AAIA;;;;;AAQA,QAAM,kBAAkB,GAAG,IAAI,EAAJ,GAAS,IAApC,EAA0C;;AAE1C,QAAa,aAAb,CAA0B;AASxB,IAAA,WAAA,CAAY,QAAZ,EAAiD;AAC/C,WAAK,SAAL,GAAiB,QAAjB;AACA,WAAK,OAAL,GAAe,IAAf;AACA,WAAK,kBAAL,GAA0B,WAAW,CAAC,MAAM,KAAK,YAAL,EAAP,EAA4B,KAAK,IAAjC,CAArC;AACA,WAAK,aAAL,GAAqB,CAArB;AACA,WAAK,qBAAL,GAA6B,KAAK,SAAL,CAAe,WAAf,CAA2B,MACtD,KAAK,WAAL,EAD2B,CAA7B;AAGD;;AAEM,IAAA,OAAO,GAAA;AACZ,MAAA,aAAa,CAAC,KAAK,kBAAN,CAAb;;AACA,WAAK,qBAAL,CAA2B,OAA3B;;AACA,WAAK,WAAL;AACD;;AAEM,IAAA,wBAAwB,CAAC,GAAG,SAAJ,EAAoB;AACjD,UAAI,OAAJ;;AACA,aAAO,KAAK,UAAL,GACJ,IADI,CACC,MAAM,IAAG;AACb,QAAA,OAAO,GAAG,MAAV;AACD,OAHI,EAIJ,IAJI,CAIC,CAAC,IAAG;AACR,eAAO,KAAK,OAAL,CAAa,mBAAb,CAAiC,SAAjC,CAAP;AACD,OANI,EAOJ,IAPI,CAOC,CAAC,IAAI,OAPN,CAAP;AAQD;;AAEO,IAAA,WAAW,GAAA;AACjB,UAAI,KAAK,OAAT,EAAkB;AAChB,aAAK,OAAL,CAAa,OAAb;;AACA,aAAK,OAAL,GAAe,IAAf;AACD;;AACD,WAAK,OAAL,GAAe,IAAf;AACD;;AAEO,IAAA,YAAY,GAAA;AAClB,UAAI,CAAC,KAAK,OAAV,EAAmB;AACjB;AACD;;AACD,YAAM,uBAAuB,GAAG,IAAI,CAAC,GAAL,KAAa,KAAK,aAAlD;;AACA,UAAI,uBAAuB,GAAG,kBAA9B,EAAkD;AAChD,aAAK,WAAL;AACD;AACF;;AAEO,IAAA,UAAU,GAAA;AAChB,WAAK,aAAL,GAAqB,IAAI,CAAC,GAAL,EAArB;;AAEA,UAAI,CAAC,KAAK,OAAV,EAAmB;AACjB,aAAK,OAAL,GAAe,MAAM,CAAC,MAAP,CAAc,eAAd,CAA0C;AACvD;AACA,UAAA,QAAQ,EAAE,6BAF6C;AAIvD,UAAA,KAAK,EAAE,KAAK,SAAL,CAAe,UAJiC;AAMvD;AACA,UAAA,UAAU,EAAE;AACV,YAAA,gBAAgB,EAAE,KAAK,SAAL,CAAe,kBADvB;AAEV,YAAA,UAAU,EAAE,KAAK,SAAL,CAAe,UAFjB;AAGV,YAAA,mBAAmB,EAAE,KAAK,SAAL,CAAe,kBAAf,CAClB;AAJO;AAP2C,SAA1C,CAAf;AAeA,aAAK,OAAL,GAAe,KAAK,OAAL,CAAa,QAAb,EAAf;AACD;;AAED,aAAO,KAAK,OAAZ;AACD;;AA9EuB;;AAA1B,EAAA,OAAA,CAAA,aAAA,GAAA,aAAA","file":"workerManager.js","sourceRoot":"..\\src","sourcesContent":["/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\r\n'use strict';\r\n\r\nimport { LanguageServiceDefaultsImpl } from './monaco.contribution';\r\nimport { YAMLWorker } from './yamlWorker';\r\n\r\nimport IDisposable = monaco.IDisposable;\r\nimport Uri = monaco.Uri;\r\n\r\nconst STOP_WHEN_IDLE_FOR = 2 * 60 * 1000; // 2min\r\n\r\nexport class WorkerManager {\r\n  private _defaults: LanguageServiceDefaultsImpl;\r\n  private _idleCheckInterval: NodeJS.Timer;\r\n  private _lastUsedTime: number;\r\n  private _configChangeListener: IDisposable;\r\n\r\n  private _worker: monaco.editor.MonacoWebWorker<YAMLWorker>;\r\n  private _client: Promise<YAMLWorker>;\r\n\r\n  constructor(defaults: LanguageServiceDefaultsImpl) {\r\n    this._defaults = defaults;\r\n    this._worker = null;\r\n    this._idleCheckInterval = setInterval(() => this._checkIfIdle(), 30 * 1000);\r\n    this._lastUsedTime = 0;\r\n    this._configChangeListener = this._defaults.onDidChange(() =>\r\n      this._stopWorker()\r\n    );\r\n  }\r\n\r\n  public dispose(): void {\r\n    clearInterval(this._idleCheckInterval);\r\n    this._configChangeListener.dispose();\r\n    this._stopWorker();\r\n  }\r\n\r\n  public getLanguageServiceWorker(...resources: Uri[]): Promise<YAMLWorker> {\r\n    let _client: YAMLWorker;\r\n    return this._getClient()\r\n      .then(client => {\r\n        _client = client;\r\n      })\r\n      .then(_ => {\r\n        return this._worker.withSyncedResources(resources);\r\n      })\r\n      .then(_ => _client);\r\n  }\r\n\r\n  private _stopWorker(): void {\r\n    if (this._worker) {\r\n      this._worker.dispose();\r\n      this._worker = null;\r\n    }\r\n    this._client = null;\r\n  }\r\n\r\n  private _checkIfIdle(): void {\r\n    if (!this._worker) {\r\n      return;\r\n    }\r\n    const timePassedSinceLastUsed = Date.now() - this._lastUsedTime;\r\n    if (timePassedSinceLastUsed > STOP_WHEN_IDLE_FOR) {\r\n      this._stopWorker();\r\n    }\r\n  }\r\n\r\n  private _getClient(): Promise<YAMLWorker> {\r\n    this._lastUsedTime = Date.now();\r\n\r\n    if (!this._client) {\r\n      this._worker = monaco.editor.createWebWorker<YAMLWorker>({\r\n        // module that exports the create() method and returns a `YAMLWorker` instance\r\n        moduleId: 'vs/language/yaml/yamlWorker',\r\n\r\n        label: this._defaults.languageId,\r\n\r\n        // passed in to the create() method\r\n        createData: {\r\n          languageSettings: this._defaults.diagnosticsOptions,\r\n          languageId: this._defaults.languageId,\r\n          enableSchemaRequest: this._defaults.diagnosticsOptions\r\n            .enableSchemaRequest,\r\n        },\r\n      });\r\n\r\n      this._client = this._worker.getProxy();\r\n    }\r\n\r\n    return this._client;\r\n  }\r\n}\r\n"]}