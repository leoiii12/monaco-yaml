{"version":3,"sources":["monaco.contribution.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;;AAIA;;;;;AAIA,MAAO,OAAO,GAAG,MAAM,CAAC,OAAxB,EAQA;;AAEA,QAAa,2BAAb,CAAwC;AAQtC,IAAA,WAAA,CACE,UADF,EAEE,kBAFF,EAE8D;AARtD,WAAA,YAAA,GAAe,IAAI,OAAJ,EAAf;AAUN,WAAK,WAAL,GAAmB,UAAnB;AACA,WAAK,qBAAL,CAA2B,kBAA3B;AACD;;AAED,QAAI,WAAJ,GAAe;AACb,aAAO,KAAK,YAAL,CAAkB,KAAzB;AACD;;AAED,QAAI,UAAJ,GAAc;AACZ,aAAO,KAAK,WAAZ;AACD;;AAED,QAAI,kBAAJ,GAAsB;AACpB,aAAO,KAAK,mBAAZ;AACD;;AAEM,IAAA,qBAAqB,CAC1B,OAD0B,EACuB;AAEjD,WAAK,mBAAL,GAA2B,OAAO,IAAI,MAAM,CAAC,MAAP,CAAc,IAAd,CAAtC;;AACA,WAAK,YAAL,CAAkB,IAAlB,CAAuB,IAAvB;AACD;;AAjCqC;;AAAxC,EAAA,OAAA,CAAA,2BAAA,GAAA,2BAAA;AAoCA,QAAM,iBAAiB,GAA6C;AAClE,IAAA,QAAQ,EAAE,IADwD;AAElE,IAAA,OAAO,EAAE,EAFyD;AAGlE,IAAA,mBAAmB,EAAE;AAH6C,GAApE;AAMA,QAAM,YAAY,GAAG,IAAI,2BAAJ,CAAgC,MAAhC,EAAwC,iBAAxC,CAArB,EAEA;;AACA,WAAS,SAAT,GAAkB;AAChB,WAAO;AACL,MAAA;AADK,KAAP;AAGD;;AACD,EAAA,MAAM,CAAC,SAAP,CAAiB,IAAjB,GAAwB,SAAS,EAAjC,EAEA;;AAEA,WAAS,QAAT,CAAkB,QAAlB,EAAyD;AACvD,IAAA,OAAO,CAAc,CAAC,2BAAD,CAAd,EAA6C,QAA7C,CAAP;AACD;;AAED,EAAA,MAAM,CAAC,SAAP,CAAiB,QAAjB,CAA0B;AACxB,IAAA,EAAE,EAAE,MADoB;AAExB,IAAA,UAAU,EAAE,CAAC,OAAD,EAAU,MAAV,CAFY;AAGxB,IAAA,OAAO,EAAE,CAAC,MAAD,EAAS,MAAT,EAAiB,KAAjB,EAAwB,KAAxB,CAHe;AAIxB,IAAA,SAAS,EAAE,CAAC,oBAAD;AAJa,GAA1B;AAMA,EAAA,MAAM,CAAC,SAAP,CAAiB,UAAjB,CAA4B,MAA5B,EAAoC,MAAK;AACvC,IAAA,QAAQ,CAAC,IAAI,IAAI,IAAI,CAAC,SAAL,CAAe,YAAf,CAAT,CAAR;AACD,GAFD","file":"monaco.contribution.js","sourceRoot":"..\\src","sourcesContent":["/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\r\n'use strict';\r\n\r\nimport * as mode from './yamlMode';\r\n\r\nimport Emitter = monaco.Emitter;\r\nimport IEvent = monaco.IEvent;\r\n\r\ndeclare var require: <T>(\r\n  moduleId: [string],\r\n  callback: (module: T) => void\r\n) => void;\r\n\r\n// --- YAML configuration and defaults ---------\r\n\r\nexport class LanguageServiceDefaultsImpl\r\n  implements monaco.languages.yaml.LanguageServiceDefaults {\r\n  private _onDidChange = new Emitter<\r\n    monaco.languages.yaml.LanguageServiceDefaults\r\n  >();\r\n  private _diagnosticsOptions: monaco.languages.yaml.DiagnosticsOptions;\r\n  private _languageId: string;\r\n\r\n  constructor(\r\n    languageId: string,\r\n    diagnosticsOptions: monaco.languages.yaml.DiagnosticsOptions\r\n  ) {\r\n    this._languageId = languageId;\r\n    this.setDiagnosticsOptions(diagnosticsOptions);\r\n  }\r\n\r\n  get onDidChange(): IEvent<monaco.languages.yaml.LanguageServiceDefaults> {\r\n    return this._onDidChange.event;\r\n  }\r\n\r\n  get languageId(): string {\r\n    return this._languageId;\r\n  }\r\n\r\n  get diagnosticsOptions(): monaco.languages.yaml.DiagnosticsOptions {\r\n    return this._diagnosticsOptions;\r\n  }\r\n\r\n  public setDiagnosticsOptions(\r\n    options: monaco.languages.yaml.DiagnosticsOptions\r\n  ): void {\r\n    this._diagnosticsOptions = options || Object.create(null);\r\n    this._onDidChange.fire(this);\r\n  }\r\n}\r\n\r\nconst diagnosticDefault: monaco.languages.yaml.DiagnosticsOptions = {\r\n  validate: true,\r\n  schemas: [],\r\n  enableSchemaRequest: false,\r\n};\r\n\r\nconst yamlDefaults = new LanguageServiceDefaultsImpl('yaml', diagnosticDefault);\r\n\r\n// Export API\r\nfunction createAPI(): typeof monaco.languages.yaml {\r\n  return {\r\n    yamlDefaults,\r\n  };\r\n}\r\nmonaco.languages.yaml = createAPI();\r\n\r\n// --- Registration to monaco editor ---\r\n\r\nfunction withMode(callback: (module: typeof mode) => void): void {\r\n  require<typeof mode>(['vs/language/yaml/yamlMode'], callback);\r\n}\r\n\r\nmonaco.languages.register({\r\n  id: 'yaml',\r\n  extensions: ['.yaml', '.yml'],\r\n  aliases: ['YAML', 'yaml', 'YML', 'yml'],\r\n  mimetypes: ['application/x-yaml'],\r\n});\r\nmonaco.languages.onLanguage('yaml', () => {\r\n  withMode(mode => mode.setupMode(yamlDefaults));\r\n});\r\n"]}